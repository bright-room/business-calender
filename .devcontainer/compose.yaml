services:
  app:
    build: 
      context: "./app"
    hostname: "app"
    env_file:
      - ".env"
    command: [ "sleep", "infinity" ]
    restart: "unless-stopped"

  db:
    build:
      context: "./db"
    hostname: "${BUSINESS_DB_HOST}"
    environment:
      POSTGRES_DB: "${BUSINESS_DB_NAME}"
      POSTGRES_USER: "${BUSINESS_DB_USER}"
      POSTGRES_PASSWORD: "${BUSINESS_DB_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      TZ: "${TZ}"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: "10s"
      timeout: "5s"
      retries: "3"
    restart: "unless-stopped"

  storage:
    image: "minio/minio:latest"
    hostname: "storage"
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY}"
    ports:
      - "9001:9001"
    volumes:
      - "storage-data:/data"
    command: [ "server", "/data", "--address", ":9000", "--console-address", ":9001" ]
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"

  storage-init:
    image: "minio/mc"
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY}"
      MINIO_ENDPOINT: "${AWS_ENDPOINT}"
      MINIO_CREDENTIALS_ALIAS: "${AWS_CREDENTIALS_ALIAS}"
      MINIO_CRATE_BUCKET: "${AWS_BUCKET}"
    depends_on:
      storage:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set $${MINIO_CREDENTIALS_ALIAS} $${MINIO_ENDPOINT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      
      mc mb $${MINIO_CREDENTIALS_ALIAS}/$${MINIO_CRATE_BUCKET};
      "

volumes:
  db-data:
  storage-data:
