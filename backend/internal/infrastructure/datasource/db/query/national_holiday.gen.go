// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"net.bright-room.dev/calender-api/internal/infrastructure/datasource/db/entity"
)

func newNationalHoliday(db *gorm.DB, opts ...gen.DOOption) nationalHoliday {
	_nationalHoliday := nationalHoliday{}

	_nationalHoliday.nationalHolidayDo.UseDB(db, opts...)
	_nationalHoliday.nationalHolidayDo.UseModel(&entity.NationalHoliday{})

	tableName := _nationalHoliday.nationalHolidayDo.TableName()
	_nationalHoliday.ALL = field.NewAsterisk(tableName)
	_nationalHoliday.Date = field.NewTime(tableName, "date")
	_nationalHoliday.Summary = field.NewString(tableName, "summary")

	_nationalHoliday.fillFieldMap()

	return _nationalHoliday
}

type nationalHoliday struct {
	nationalHolidayDo nationalHolidayDo

	ALL     field.Asterisk
	Date    field.Time
	Summary field.String

	fieldMap map[string]field.Expr
}

func (n nationalHoliday) Table(newTableName string) *nationalHoliday {
	n.nationalHolidayDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nationalHoliday) As(alias string) *nationalHoliday {
	n.nationalHolidayDo.DO = *(n.nationalHolidayDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nationalHoliday) updateTableName(table string) *nationalHoliday {
	n.ALL = field.NewAsterisk(table)
	n.Date = field.NewTime(table, "date")
	n.Summary = field.NewString(table, "summary")

	n.fillFieldMap()

	return n
}

func (n *nationalHoliday) WithContext(ctx context.Context) *nationalHolidayDo {
	return n.nationalHolidayDo.WithContext(ctx)
}

func (n nationalHoliday) TableName() string { return n.nationalHolidayDo.TableName() }

func (n nationalHoliday) Alias() string { return n.nationalHolidayDo.Alias() }

func (n nationalHoliday) Columns(cols ...field.Expr) gen.Columns {
	return n.nationalHolidayDo.Columns(cols...)
}

func (n *nationalHoliday) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nationalHoliday) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 2)
	n.fieldMap["date"] = n.Date
	n.fieldMap["summary"] = n.Summary
}

func (n nationalHoliday) clone(db *gorm.DB) nationalHoliday {
	n.nationalHolidayDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nationalHoliday) replaceDB(db *gorm.DB) nationalHoliday {
	n.nationalHolidayDo.ReplaceDB(db)
	return n
}

type nationalHolidayDo struct{ gen.DO }

func (n nationalHolidayDo) Debug() *nationalHolidayDo {
	return n.withDO(n.DO.Debug())
}

func (n nationalHolidayDo) WithContext(ctx context.Context) *nationalHolidayDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nationalHolidayDo) ReadDB() *nationalHolidayDo {
	return n.Clauses(dbresolver.Read)
}

func (n nationalHolidayDo) WriteDB() *nationalHolidayDo {
	return n.Clauses(dbresolver.Write)
}

func (n nationalHolidayDo) Session(config *gorm.Session) *nationalHolidayDo {
	return n.withDO(n.DO.Session(config))
}

func (n nationalHolidayDo) Clauses(conds ...clause.Expression) *nationalHolidayDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nationalHolidayDo) Returning(value interface{}, columns ...string) *nationalHolidayDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nationalHolidayDo) Not(conds ...gen.Condition) *nationalHolidayDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nationalHolidayDo) Or(conds ...gen.Condition) *nationalHolidayDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nationalHolidayDo) Select(conds ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nationalHolidayDo) Where(conds ...gen.Condition) *nationalHolidayDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nationalHolidayDo) Order(conds ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nationalHolidayDo) Distinct(cols ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nationalHolidayDo) Omit(cols ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nationalHolidayDo) Join(table schema.Tabler, on ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nationalHolidayDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nationalHolidayDo) RightJoin(table schema.Tabler, on ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nationalHolidayDo) Group(cols ...field.Expr) *nationalHolidayDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nationalHolidayDo) Having(conds ...gen.Condition) *nationalHolidayDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nationalHolidayDo) Limit(limit int) *nationalHolidayDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nationalHolidayDo) Offset(offset int) *nationalHolidayDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nationalHolidayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nationalHolidayDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nationalHolidayDo) Unscoped() *nationalHolidayDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nationalHolidayDo) Create(values ...*entity.NationalHoliday) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nationalHolidayDo) CreateInBatches(values []*entity.NationalHoliday, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nationalHolidayDo) Save(values ...*entity.NationalHoliday) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nationalHolidayDo) First() (*entity.NationalHoliday, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NationalHoliday), nil
	}
}

func (n nationalHolidayDo) Take() (*entity.NationalHoliday, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NationalHoliday), nil
	}
}

func (n nationalHolidayDo) Last() (*entity.NationalHoliday, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NationalHoliday), nil
	}
}

func (n nationalHolidayDo) Find() ([]*entity.NationalHoliday, error) {
	result, err := n.DO.Find()
	return result.([]*entity.NationalHoliday), err
}

func (n nationalHolidayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.NationalHoliday, err error) {
	buf := make([]*entity.NationalHoliday, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nationalHolidayDo) FindInBatches(result *[]*entity.NationalHoliday, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nationalHolidayDo) Attrs(attrs ...field.AssignExpr) *nationalHolidayDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nationalHolidayDo) Assign(attrs ...field.AssignExpr) *nationalHolidayDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nationalHolidayDo) Joins(fields ...field.RelationField) *nationalHolidayDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nationalHolidayDo) Preload(fields ...field.RelationField) *nationalHolidayDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nationalHolidayDo) FirstOrInit() (*entity.NationalHoliday, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NationalHoliday), nil
	}
}

func (n nationalHolidayDo) FirstOrCreate() (*entity.NationalHoliday, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.NationalHoliday), nil
	}
}

func (n nationalHolidayDo) FindByPage(offset int, limit int) (result []*entity.NationalHoliday, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nationalHolidayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nationalHolidayDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nationalHolidayDo) Delete(models ...*entity.NationalHoliday) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nationalHolidayDo) withDO(do gen.Dao) *nationalHolidayDo {
	n.DO = *do.(*gen.DO)
	return n
}
